package parallelComputingLib;

import java.io.*;
import java.nio.*;
import java.nio.channels.*;

public class GeneWorker extends Worker{


  public static void main(String[] args){
    GeneWorker w = new GeneWorker();
    w.setupWorker();
  }
  protected void identifyTCPData(ByteBuffer msg, SocketChannel callback){
    long startingRow = msg.getLong(); //send this back to server to ident the row we worked on
    int numberOfRows = (int)msg.getLong();
    int numbersPerRow = (int)msg.getLong();

    int size = ((msg.limit()-24)/8);
    int pointer = 0;
    double returnVal = 0;

    ByteBuffer returnValBuffer = ByteBuffer.allocate((numberOfRows*8)+8);
    returnValBuffer.putLong(startingRow);

    for(int i=0;i<size;i++){
      if(pointer<numbersPerRow){
        returnVal+=msg.getDouble();
        pointer++;
      }else{
        pointer = 0;
        returnValBuffer.putDouble(returnVal);
        returnVal = 0;

        returnVal +=msg.getDouble();
        pointer++;
      }
    }
    returnValBuffer.putDouble(returnVal);

    returnValBuffer.flip();
    try {
      callback.write(returnValBuffer);
    }catch (IOException ex) {System.out.println("IOException in identifyTCPData(): " + ex);}
  }
  protected void identifyUDPData(ByteBuffer msg, String ip){
    int n = Character.getNumericValue((char)msg.get(0));

    switch(n){
      case 0:
        //kill message
        if(server.computerIP.equals(ip)){
          System.exit(0);
        }
        break;
      case 3:
        server.computerID = String.valueOf(msg.getLong(1));
        server.computerIP = ip;
        if(!connected)
          connectToServer(ip);
        break;

      case 4:
        //stop advertising
        if(advertise)
          stopAdvertising();
        break;
    }
  }
}
