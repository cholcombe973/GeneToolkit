package digitalLabManagementSystem;

import java.io.*;
import java.util.ArrayList;
import java.util.jar.*;

/**
 *
 * <p>Title: CHashtable</p>
 * <p>Description: This class is similiar to the Hashtable class in java.util package with the exception
 * being that this class takes key and maps to a value array.  An example being taking a value x
 * as the key and x can be associated with any number of other values.
 * </p>
 * <p>Copyright: Copyright (c) 2004</p>
 * @author Chris Holcombe
 * @version 1.0
 */
public class CHashtable extends Module{
  private ArrayList keys;
  private ArrayList values;
  private ReferenceEngine re;
  private ModuleManager mm;
  private String moduleDirectory;
  
  public void initModule(){
    mm = (ModuleManager)re.getReference("ModuleManager");
    setAuthor("Chris Holcombe");
    setDescription("Networking module to provide simple network support");
    setModulePID(mm.getPID());
    setName("NetworkModule");
    setVersion("1.0");
    mm.registerModule("CHashTable",this);
  }
  public void cleanupModule(){
    if(mm!=null)
      mm.unregisterModule("");        
  }
  /**
   * 
   * @param re ReferenceEngine
   * @param initialCapacity int
   */
  public CHashtable(ReferenceEngine re,int initialCapacity) {
    this.re = re;
    keys = new ArrayList(initialCapacity);
    values = new ArrayList(initialCapacity);
  }
  /**
   * Maps the specified key to the specified value[] in this hashtable.
   * @param key Object
   * @param values Object[]
   */
  public void put(Object key,Object[] values){
    keys.add(key);
    this.values.add(values);
  }
  /**
   * Clears this hashtable so that it contains no keys.
   */
  public void clear(){
    keys.clear();
    values.clear();
  }
  /**
   * Returns true if this Hashtable maps one or more keys to this value
   * @param value Object
   * @return boolean
   */
  public boolean containsValue(Object value){

    return false;
  }
  /**
   * Tests if the specified object is a key in this hashtable.
   * @param key Object
   * @return boolean
   */
  public boolean containsKey(Object key){
    return keys.contains(key);
  }
  /**
   * Returns an ArrayList of the values in this hashtable
   * @return ArrayList
   */
  public ArrayList elements(){
    return values;
  }
  /**
   * Returns the value[] to which the specified key is mapped in this hashtable
   * @param key Object
   * @return Object[]
   */
  public Object[] get(Object key){
    return (Object[])values.get(keys.indexOf(key));
  }
  public void findInitialModules(){
    JarFile jar = new JarFile("");
  }
  /**
   * Returns the number of keys in this hashtable.
   * @return int
   */
  public int size(){
    return keys.size();
  }
  /**
   * Returns a string representation of this Hashtable object in the form of a set of entries,
   * enclosed in braces and separated by the ASCII characters ", " (comma and space).
   * @return String
   */
  public String toString(){
    StringBuffer b = new StringBuffer();
    b.append('{');
    for(int i=0;i<keys.size();i++){
      Object[] valueArray = (Object[])values.get(i);
      for(int j=0;j<valueArray.length;j++){
        b.append(keys.get(i));
        b.append('=');
        b.append(valueArray[j]);
        if(j<(valueArray.length-1))
          b.append(", ");
      }
    }
    b.append('}');
    return b.toString();
  }
}
