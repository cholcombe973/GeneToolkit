package digitalLabManagementSystem;

/**
   Handles all details of a database
   This Engine should be started 3rd
 */

import java.io.*;
import java.sql.*;
import java.util.*;

public class DatabaseEngine implements GlobalListener,IDatabase{
  private Connection con;
  private String driver; // = "org.gjt.mm.mysql.Driver";
  private String connectionString; // = "jdbc:mysql://localhost:3306/collegematch?user=ColdFusion&password=metal656";
  private Properties databaseInfo;
  private boolean usePropertyFile = false;
  private PreparedStatement ps;
  private ArrayList listeners = new ArrayList();
  private ReferenceEngine re;

  public DatabaseEngine(boolean usePropertyFile,ReferenceEngine re) {
    this.re = re;
    re.putReference("DatabaseEngine",this);
    databaseInfo = new Properties();
    this.usePropertyFile = usePropertyFile;
  }
  public void setPropertiesFile(File f){
    try {
      databaseInfo.load(new FileInputStream(f));
    }catch (IOException e) {
      ((LogEngine)re.getReference("LogEngine")).logSevereMsg("IOException in setPropertiesFile: " + e);
      System.out.println("IOException in setPropertiesFile: " + e);
    }
  }
  public void setConnectionString(String connectionString){
    this.connectionString = connectionString;
  }
  public String getConnnectionString(){
    return connectionString;
  }
  public void setDriver(String driver){
    this.driver = driver;
  }
  public String getDriver(){
    return driver;
  }
  public void prepareStatement(String statement){
    try {
      ps = con.prepareStatement(statement);
    }catch (SQLException e) {
      ((LogEngine)re.getReference("LogEngine")).logSevereMsg("SQLException in prepareStatement: " + e);
      System.out.println("SQLException in prepareStatement: " + e);
    }
  }
  public ResultSet executePreparedQuery(){
    if(ps !=null){
      try {
        return ps.executeQuery();
      }catch (SQLException e) {
        ((LogEngine)re.getReference("LogEngine")).logSevereMsg("SQLException in executePreparedQuery: " + e);
        System.out.println("SQLException in executeStatement:"+e);
        return null;
      }
    }else{
      //log PreparedStatement was null exception
      ((LogEngine)re.getReference("LogEngine")).logSevereMsg("PreparedStatement null in executePreparedQuery");
      return null;
    }
  }
  public int executePreparedUpdate(){
    // -1 indicates an error SQL will never return that
    if(ps !=null){
      try {
        return ps.executeUpdate();
      }catch (SQLException e) {
        ((LogEngine)re.getReference("LogEngine")).logSevereMsg("SQLException in executePreparedUpdate: " + e);
        System.out.println("SQLException in executePreparedUpdate: " + e);
        return -1;
      }
    }else{
      //log PreparedStatement was null exception
      ((LogEngine)re.getReference("LogEngine")).logSevereMsg("PreparedStatement null in executePreparedUpdate");
      return -1;
    }
  }
  public void globalActionPerformed(GlobalEvent e){

  }
  public void registerGlobalListener(GlobalListener g){
    listeners.add(g);
  }
  public void unregisterGlobalListener(GlobalListener g){
    listeners.remove(g);
  }
  private void fireGlobalAction(){
    //create a global event and fire it to all listeners
    int size = listeners.size();
    GlobalEvent e = new GlobalEvent(GlobalEvent.exampleModifier);
    for(int i=0;i<size;i++){
      ((GlobalListener)listeners.get(i)).globalActionPerformed(e);
    }
  }
  private void connect() {
    /* THIS WILL BE CALLED FROM LOAD OR STARTUP*/
    // get connected to the database;
    if(!usePropertyFile){
      try{
        Class.forName(driver);
      }catch(ClassNotFoundException e){
        ((LogEngine)re.getReference("LogEngine")).logSevereMsg("ClassNotFound in connect without Property File: " + e);
        System.out.println("ClassNotFoundException: " + e);
      }
      try{
        con = DriverManager.getConnection(connectionString);
      }catch(SQLException e){
        ((LogEngine)re.getReference("LogEngine")).logSevereMsg("SQLException in connect without Property File: " + e);
        System.out.println("SQL Exception found: " + e);
      }
    }else{
      if(databaseInfo!=null){
        try {
          Class.forName(databaseInfo.getProperty("Driver"));
        }catch (ClassNotFoundException e) {
          ((LogEngine)re.getReference("LogEngine")).logSevereMsg("ClassNotFound in connect with Property File: " + e);
          System.out.println("ClassNotFoundException: " + e);
        }
        try {
          con = DriverManager.getConnection(databaseInfo.getProperty("Connection"));
        }catch (SQLException e) {
          ((LogEngine)re.getReference("LogEngine")).logSevereMsg("SQLException in connect with Property File: " + e);
          System.out.println("SQL Exception found: " + e);
        }
      }
      else{
        //this should be logged
        ((LogEngine)re.getReference("LogEngine")).logSevereMsg("Database Property file is null in connect");
      }
    }
  }
  public void shutdown(){
    if(con!=null){
      try {
        con.close();
      }catch (SQLException e) {
        ((LogEngine)re.getReference("LogEngine")).logSevereMsg("SQLException in shutdown: " + e);
        System.out.println("SQLException in shutdown: " + e);
      }
    }else{
      //log a Connection null exception
      ((LogEngine)re.getReference("LogEngine")).logSevereMsg("Database Connection is null in shutdown");
    }
  }

}
